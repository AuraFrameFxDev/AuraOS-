# This is the final, validated CI/CD workflow for the AuraOS project.
# It ensures the correct Java and Android SDK environment, handles caching,
# generates the necessary API clients, and builds the final release artifacts.

name: Android CI

on:
  push:
    branches: [ "AuraOS" ]
  pull_request:
    branches: [ "AuraOS" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up the correct Java environment (JDK 24)
      # This is critical to match the project's requirements.
      - name: Set up JDK 24
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '24'

      # 3. Set up the Android SDK
      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
        with:
          sdk-version: '36'

      # 4. Cache Gradle dependencies to speed up subsequent builds
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 5. Grant execute permissions to the Gradle wrapper script
      # This is required for Linux-based runners.
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # 6. Regenerate the OpenAPI client to ensure it's in sync with the latest API spec
      # This is a critical step after making changes to openapi.yml
      - name: Generate OpenAPI Client
        run: ./gradlew :app:generateOpenApiDocs --no-configuration-cache --info | tee gradle-openapi-main.log

      # 7. Build the application (Release variant)
      # We run a full build to ensure all code compiles and resources are packaged correctly.
      - name: Build Project (Release)
        run: ./gradlew assembleRelease --no-configuration-cache --info | tee gradle-build.log

      # 8. Upload the final build artifacts (APK/AAB) for distribution or testing
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: App-Builds
          path: |
            app/build/outputs/apk/release/*.apk
            app/build/outputs/bundle/release/*.aab

      # 9. Upload Gradle logs for debugging in case of failure
      - name: Upload Gradle Logs
        if: failure() # Only upload logs if the build fails
        uses: actions/upload-artifact@v4
        with:
          name: Gradle-Logs
          path: |
            gradle-openapi-main.log
            gradle-build.log

